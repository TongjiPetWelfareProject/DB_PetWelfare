<?xml version="1.0" encoding="utf-8" ?>
<Queries>
	<Query name="SelectFromTable">
		SELECT {columns}
		FROM {table}
		WHERE {conditions}
	</Query>
	<Query name="CreateTable0">
		create table user2(--since table name 'user' is not valid in that it'a a internal name of system
  			user_id varchar2(20) not null,
  			user_name varchar2(20),
  			password varchar2(16),
  			phone_number varchar2(20),--it always comes true that a phone number will contain some special character dash or space ,so its length is variable
  			account_status varchar2(20),
  			address varchar2(100),
        role varchar2(10) default 'User',
        CONSTRAINT CHK_Role CHECK(role in('Admin','User','Unknown','Other')),
  			CONSTRAINT CHK_PhoneNumber CHECK (REGEXP_LIKE (phone_number, '^\d{3}-\d{4}-\d{4}$') OR REGEXP_LIKE (phone_number, '^\d{11}$') OR REGEXP_LIKE (phone_number, '^\d{3} \d{4} \d{4}$')),--check if the phone_number is legal
  			CONSTRAINT CHK_Password CHECK(LENGTH(password) >= 10 AND
    			REGEXP_LIKE(password, '[0-9]') AND
    			REGEXP_LIKE(password, '[a-z]') AND
    			REGEXP_LIKE(password, '[A-Z]') AND
    			REGEXP_LIKE(password, '[!@#$%&amp;*^()]')),
    			primary key(user_id),
    			check(account_status in('Compliant','In Good Standing','Under Review','Warning Issued','Suspended','Probation','Banned','Appealing'))
			)
	</Query>
	<Query name="CreateTable1">
		create table pet(
  			pet_id varchar2(20) not null,
  			pet_name varchar2(20),
  			breed varchar2(20),
  			birthdate DATE,
  			avatar BLOB,
  			health_state varchar2(15),
  			vaccine char(1),--Y represents vaccination done while N represents undone.
  			read_num int default 0,
  			like_num int default 0,
  			collect_num int default 0,
  			primary key(pet_id),
  			CONSTRAINT CHK_HealthState CHECK(health_state in('Vibrant','Well','Decent','Unhealthy','Sicky','Critical')),
  			CONSTRAINT CHK_Num CHECK(read_num>=0 AND like_num>=0 AND collect_num>=0 AND vaccine in('Y','N'))
		)LOB(avatar) STORE AS SECUREFILE
	</Query>
	<Query name="CreateTable2">
		create table room(
  			room_status char(1),--'Y'/'N'
  			room_size numeric(5,2),--since area may lead to ambiguity
  			storey numeric(2,0),--since floor may lead to ambiguity
  			compartment numeric(2,0),
  			cleaning_time  varchar2(50) default TO_CHAR(CURRENT_TIMESTAMP),
  			primary key(storey,compartment),
  			check (storey between 1 and 10 and compartment between 1 and 30),
  			CONSTRAINT CHK_RoomStatus CHECK(room_status in('Y','N')),
  			CONSTRAINT CHK_Legal CHECK(storey>0 AND room_size>=0)
		)
	</Query>
	<Query name="CreateTable3">
		create table vet(
  			vet_id varchar2(20) not null,
  			vet_name varchar(20),
  			salary numeric(9,2),
  			phone_number varchar2(20),
  			--the following attributes as an integrity represents the interval of working hours
  			working_start_hr numeric(2,0),
  			working_end_hr numeric(2,0),
  			working_start_min numeric(2,0),
  			working_end_min numeric(2,0),
  			primary key(vet_id),
  			CONSTRAINT CHK_WorkingHours CHECK(
  			working_start_hr between 0 and 23 and working_end_hr between working_start_hr and 23 
  			and working_end_hr*60+working_end_min>=working_start_hr*60+working_start_min
  			and working_start_min between 0 and 59 and working_end_min between 0 and 59 ),
  			CONSTRAINT CHK_PhoneNumber2 CHECK (REGEXP_LIKE (phone_number, '^\d{3}-\d{4}-\d{4}$') OR REGEXP_LIKE (phone_number, '^\d{11}$') OR REGEXP_LIKE (phone_number, '^\d{3} \d{4} \d{4}$'))
			)
	</Query>
	<Query name="CreateTable4">
		create table employee(
  employee_id varchar2(20) not null,
  employee_name varchar(20),
  salary numeric(9,2),
  phone_number varchar2(20),
  duty varchar2(50),
  --the following attributes as an integrity represents the interval of working hours
  working_start_hr numeric(2,0),
  working_start_min numeric(2,0),
  working_end_hr numeric(2,0),
  working_end_min numeric(2,0),
  primary key(employee_id),
  CONSTRAINT CHK_WorkingHours2 CHECK(
  working_start_hr between 0 and 23 and working_end_hr between working_start_hr and 23 
  and working_end_hr*60+working_end_min>=working_start_hr*60+working_start_min
  and working_start_min between 0 and 59 and working_end_min between 0 and 59 ),
  CONSTRAINT CHK_PhoneNumber3 CHECK (REGEXP_LIKE (phone_number, '^\d{3}-\d{4}-\d{4}$') OR REGEXP_LIKE (phone_number, '^\d{11}$') OR REGEXP_LIKE (phone_number, '^\d{3} \d{4} \d{4}$')),
  CONSTRAINT CHK_DUTIES CHECK(duty in('Animal Care Specialist','Adoption Counselor','Veterinary Technician',
  'Animal Behaviorist','Volunteer Coordinator','Foster Coordinator',
  'Facility Manager','Fundraising and Outreach Coordinator','Rescue Transporter'))
)
	</Query>
	<Query name="CreateTable5">
		create table bulletin(
  bulletin_id varchar2(20),
  employee_id varchar2(20) references employee(employee_id) ,
  heading varchar2(20),
  bulletin_contents varchar2(2000) not null,
  read_count int,
  published_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(bulletin_id)
)partition by range(published_time)interval(interval '1' year)
(partition start_bulletion values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable6">
		create table forum_posts(
  post_id varchar2(20) not null,
  user_id varchar2(20) references user2(user_id),
  post_contents varchar2(1000) not null,
  read_count int default 0,
  like_num int default 0,
  comment_num int default 0,
  censored CHAR(1) CHECK(censored in('Y','N')),
  post_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(post_id),
  constraint CHK_LEGAL2 check(read_count>=0 and like_num>=0 and comment_num>=0
  and read_count>= like_num and read_count>=comment_num)
)partition by range(post_time)interval(interval '1' year)
(partition start_post values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable7">
		create table donation(
  donor_id varchar(20) references user2(user_id),
  donation_amount int,
  donation_time TIMESTAMP default CURRENT_TIMESTAMP,
  constraints CHK_DONATION check(donation_amount>0),
  primary key(donor_id,donation_amount,donation_time)
)partition by range(donation_time)interval(interval '1' year)
(partition start_donate values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable8">
		create table adopt(
  adopter_id varchar2(20) references user2(user_id),
  pet_id varchar2(20) references pet(pet_id),
  adoption_time DATE default CURRENT_DATE,
  primary key(adopter_id,pet_id)
)partition by range(adoption_time)interval(interval '1' year)
(partition start_donate values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable9">
		create table foster(
  duration smallint,
  fosterer varchar2(20) references user2(user_id),
  pet_id varchar2(20) references pet(pet_id),
  start_year numeric(4,0) default extract(year from CURRENT_DATE),
  start_month numeric(2,0) default extract(month from CURRENT_DATE),
  start_day numeric(2,0) default extract(day from CURRENT_DATE),
  primary key(start_year,start_month,start_day,fosterer,pet_id),
  constraint CHK_Duration check(duration>=0)
)partition by range(start_year)
(partition start_foster values less than('2024'))
	</Query>
	<Query name="CreateTable10">
		create table accommodate(
  pet_id varchar2(20) references pet(pet_id),
  storey numeric(2,0) ,
  compartment numeric(2,0) ,
  duration smallint,--must be standalone since in SQL, a column cannot reference another column in a different table. Instead, it references the primary key in the other table.
  start_year numeric(4,0) default extract(year from CURRENT_DATE),
  start_month numeric(2,0) default extract(month from CURRENT_DATE),
  start_day numeric(2,0) default extract(day from CURRENT_DATE),
  primary key(pet_id,storey,compartment,start_year,start_month,start_day),
  foreign key(storey,compartment) references room,
  constraint CHK_Duration2 check(duration>=0)
)partition by range(start_year)
(partition start_accommodate values less than('2024'))
	</Query>
	<Query name="CreateTable11">
		create table treatment(
  category varchar2(20),
  pet_id varchar2(20) references pet(pet_id),
  vet_id varchar2(20) references vet(vet_id),
  treat_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(treat_time,pet_id,vet_id)
)partition by range(treat_time)interval(interval '1' year)
(partition start_treatment values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable12">
		create table application(
  pet_id varchar2(20) references pet(pet_id),
  user_id varchar2(20) references user2(user_id),
  category varchar2(20),
  reason varchar2(200) not null,
  apply_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(pet_id,user_id,apply_time)
)partition by range(apply_time)interval(interval '1' year)
(partition start_apply values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable13">
		create table like_post(
  user_id varchar2(20) references user2(user_id),
  post_id varchar2(20) references forum_posts(post_id),
  like_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(like_time,user_id,post_id)
)partition by range(like_time)interval(interval '1' year)
(partition start_like_post values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable14">
		create table comment_post(
  user_id varchar2(20) references user2(user_id),
  post_id varchar2(20) references forum_posts(post_id),
  comment_contents varchar2(150) not null,
  comment_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(comment_time,user_id,post_id)
)partition by range(comment_time)interval(interval '1' year)
(partition start_comment_post values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable15">
		create table like_pet(
  user_id varchar2(20) references user2(user_id),
  pet_id varchar2(20) references pet(pet_id),
  like_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(like_time,user_id,pet_id)
)partition by range(like_time)interval(interval '1' year)
(partition start_like_pet values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable16">
		create table comment_pet(
  user_id varchar2(20) references user2(user_id),
  pet_id varchar2(20) references pet(pet_id),
  comment_contents varchar2(200) not null,
  comment_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(comment_time,user_id,pet_id)
)partition by range(comment_time)interval(interval '1' year)
(partition start_comment_pet values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
	<Query name="CreateTable17">
		create table collect_pet_info(
  user_id varchar2(20) references user2(user_id),
  pet_id varchar2(20) references pet(pet_id),
  collect_time TIMESTAMP default CURRENT_TIMESTAMP,
  primary key(collect_time,user_id,pet_id)
)partition by range(collect_time)interval(interval '1' year)
(partition start_collect_pet values less than(TIMESTAMP '2023-09-01 00:00:00'))
	</Query>
  <Query name="CreateTrigger0">
    CREATE OR REPLACE TRIGGER increase_like_count
    AFTER INSERT ON like_post
    FOR EACH ROW
    BEGIN
    UPDATE forum_posts
    SET like_num = like_num + 1
    WHERE post_id = :NEW.post_id;
    END
  </Query>
  <Query name="CreateTrigger1">
    CREATE OR REPLACE TRIGGER decrease_like_count
    AFTER DELETE ON like_post
    FOR EACH ROW
    BEGIN
    UPDATE forum_posts
    SET like_num = like_num - 1
    WHERE post_id = :OLD.post_id;
    END
  </Query>
  <Query name="CreateTrigger2">
    CREATE OR REPLACE TRIGGER increase_comment_count
    AFTER INSERT ON comment_post
    FOR EACH ROW
    BEGIN
    UPDATE forum_posts
    SET comment_num = comment_num + 1
    WHERE post_id = :NEW.post_id;
    END
  </Query>
  <Query name="CreateTrigger3">
    CREATE OR REPLACE TRIGGER decrease_comment_count
    AFTER DELETE ON comment_post
    FOR EACH ROW
    BEGIN
    UPDATE forum_posts
    SET comment_num = comment_num - 1
    WHERE post_id = :NEW.post_id;
    END
  </Query>
  <Query name="CreateTrigger4">
    CREATE OR REPLACE TRIGGER increase_pet_like_count
    AFTER INSERT ON like_pet
    FOR EACH ROW
    BEGIN
    UPDATE pet
    SET like_num = like_num + 1
    WHERE pet_id = :NEW.pet_id;
    END
  </Query>
  <Query name="CreateTrigger5">
    CREATE OR REPLACE TRIGGER decrease_pet_like_count
    AFTER DELETE ON like_pet
    FOR EACH ROW
    BEGIN
    UPDATE pet
    SET like_num = like_num - 1
    WHERE pet_id = :NEW.pet_id;
    END
  </Query>
  <Query name="CreateTrigger6">
    CREATE OR REPLACE TRIGGER increase_pet_collect_count
    AFTER INSERT ON collect_pet_info
    FOR EACH ROW
    BEGIN
    UPDATE pet
    SET collect_num = collect_num + 1
    WHERE pet_id = :NEW.pet_id;
    END
  </Query>
  <Query name="CreateTrigger7">
    CREATE OR REPLACE TRIGGER decrease_pet_collect_count
    AFTER DELETE ON collect_pet_info
    FOR EACH ROW
    BEGIN
    UPDATE pet
    SET collect_num = collect_num - 1
    WHERE pet_id = :NEW.pet_id;
    END
  </Query>
  <Query name="CreateSequence0">
    CREATE SEQUENCE user_id_seq START WITH 1 INCREMENT BY 1
  </Query>
  <Query name="CreateSequence1">
    CREATE SEQUENCE pet_id_seq
    START WITH     1
    INCREMENT BY   1
  </Query>
  <Query name="CreateSequence2">
    CREATE SEQUENCE employee_id_seq
    START WITH     1
    INCREMENT BY   1
    NOCACHE
    NOCYCLE
  </Query>
  <Query name="CreateSequence3">
    CREATE SEQUENCE post_id_seq
    START WITH     1
    INCREMENT BY   1
    NOCACHE
    NOCYCLE
  </Query>
  <Query name="CreateSequence4">
    CREATE SEQUENCE vet_id_seq
    START WITH     1
    INCREMENT BY   1
    NOCACHE
    NOCYCLE
  </Query>
  <Query name="CreateView0">
    Create or replace view vet_labor 
as select vet_id,vet_name,salary,ROUND((working_end_hr-working_start_hr)+(working_end_min-working_start_min)/60,2) as working_hours 
from vet WITH CHECK OPTION
  </Query>
  <Query name="CreateView1">
  Create or replace view employee_labor 
as select employee_id,employee_name,salary,duty,ROUND((working_end_hr-working_start_hr)+(working_end_min-working_start_min)/60,2) as working_hours 
from employee WITH CHECK OPTION
  </Query>
<Query name="CreateView2">
CREATE MATERIALIZED VIEW ownership 
BUILD IMMEDIATE
  REFRESH FORCE
  ON DEMAND
AS SELECT 
    pet.pet_id,
    pet.pet_name,
    CASE
        WHEN accommodate.storey IS NOT NULL and accommodate.compartment IS NOT NULL 
        THEN 'accommodated at room '||accommodate.storey||'-'||accommodate.compartment
        WHEN foster.fosterer IS NOT NULL 
        THEN 'fostered by '||foster.fosterer 
        WHEN adopt.adopter_id IS NOT NULL 
        THEN 'adopted by '||adopt.adopter_id  
        ELSE 'wandered'
    END AS status,
    CASE
        WHEN accommodate.storey IS NOT NULL and accommodate.compartment IS NOT NULL 
        THEN TO_CHAR(TO_DATE(
      accommodate.start_year || '-' || accommodate.start_month || '-' || accommodate.start_day, 'YYYY-MM-DD'),'YYYY-MM-DD')
        WHEN foster.fosterer IS NOT NULL 
        THEN TO_CHAR(TO_DATE(
      foster.start_year || '-' || foster.start_month || '-' || foster.start_day, 'YYYY-MM-DD'),'YYYY-MM-DD')
        WHEN adopt.adopter_id IS NOT NULL 
        THEN TO_CHAR(adopt.adoption_time,'YYYY-MM-DD')
    END AS start_time,
    CASE
        WHEN accommodate.storey IS NOT NULL and accommodate.compartment IS NOT NULL 
        THEN TO_CHAR(TO_DATE(
      accommodate.start_year || '-' || accommodate.start_month || '-' || accommodate.start_day, 
      'YYYY-MM-DD') + NUMTODSINTERVAL(accommodate.duration, 'DAY'), 'YYYY-MM-DD')
        WHEN foster.fosterer IS NOT NULL 
        THEN TO_CHAR(TO_DATE(
      foster.start_year || '-' || foster.start_month || '-' || foster.start_day, 
      'YYYY-MM-DD') + NUMTODSINTERVAL(foster.duration, 'DAY'), 'YYYY-MM-DD')
    END AS end_time
FROM pet
LEFT OUTER JOIN foster ON pet.pet_id = foster.pet_id
LEFT OUTER JOIN accommodate ON accommodate.pet_id = pet.pet_id
LEFT OUTER JOIN adopt ON adopt.pet_id = pet.pet_id
LEFT OUTER JOIN user2 ON user2.user_id = foster.fosterer and adopt.adopter_id= user2.user_id
  </Query>
<Query name="CreateView3">
  CREATE OR REPLACE VIEW user_profile AS 
SELECT user2.user_id,user2.user_name,
       COUNT(forum_posts.post_id) as total_posts,
       SUM(forum_posts.read_count) AS total_reads,
       SUM(forum_posts.like_num) AS total_post_likes,
       SUM(forum_posts.comment_num) AS total_post_comments,
       SUM(donation.donation_amount) AS donation_totol_amounts
FROM user2
LEFT OUTER JOIN donation ON user2.user_id = donation.donor_id
LEFT OUTER JOIN forum_posts ON user2.user_id = forum_posts.user_id
GROUP BY user2.user_id,user2.user_name order by cast(user2.user_id as numeric(5,0)) asc WITH CHECK OPTION
  </Query>
<Query name="CreateView4">
  create or replace view room_avaiable 
as select room.storey,(count(*))as capacity from room where  
not exists(select * from accommodate where room.storey=accommodate.storey and room.compartment=accommodate.compartment ) 
group by room.storey WITH CHECK OPTION
  </Query>
  <Query name="CreateView5">
    create or replace view foster_window 
    as select user2.user_name as owner,pet_id,pet_name,start_year,duration,age,breed 
    from foster 
    natural join  pet join  user2 on fosterer=user_id
  </Query>
  
</Queries>